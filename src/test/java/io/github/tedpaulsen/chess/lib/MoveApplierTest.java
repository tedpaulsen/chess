package io.github.tedpaulsen.chess.lib;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class MoveApplierTest extends TestBase {

    @Test
    public void testNormalMove() {
        var board = BoardRepresentation.initial();
        var newBoard = moveApplier.applyMove(
            board,
            new Move('P', Square.E(2), Square.E(4), Move.Kind.PAWN_DOUBLE_ADVANCE)
        );

        Assertions.assertEquals(
            """
            8 ........
            7 ........
            6 ........
            5 ........
            4 ....1...
            3 ........
            2 1111.111
            1 ........
              abcdefgh""",
            newBoard.getWhitePawns().toString()
        );
        Assertions.assertEquals(
            """
            8 ........
            7 11111111
            6 ........
            5 ........
            4 ........
            3 ........
            2 ........
            1 ........
              abcdefgh""",
            newBoard.getBlackPawns().toString()
        );
        Assertions.assertEquals("KQkq", newBoard.getCastlingInformation());
        Assertions.assertEquals(
            """
            8 ........
            7 ........
            6 ........
            5 ........
            4 ........
            3 ....1...
            2 ........
            1 ........
              abcdefgh""",
            newBoard.getEnPassantSquare().toString()
        );
    }

    @Test
    public void testSeveralMoves() {
        var board = BoardRepresentation.initial();
        board = moveApplier.applyMove(board, new Move('P', Square.E(2), Square.E(4), Move.Kind.PAWN_DOUBLE_ADVANCE));
        board = moveApplier.applyMove(board, new Move('p', Square.E(7), Square.E(5), Move.Kind.PAWN_DOUBLE_ADVANCE));
        board = moveApplier.applyMove(board, new Move('N', Square.G(1), Square.F(3)));
        board = moveApplier.applyMove(board, new Move('n', Square.B(8), Square.C(6)));
        board = moveApplier.applyMove(board, new Move('P', Square.D(2), Square.D(4), Move.Kind.PAWN_DOUBLE_ADVANCE));
        board = moveApplier.applyMove(board, new Move('p', Square.E(5), Square.D(4)));
        board = moveApplier.applyMove(board, new Move('N', Square.F(3), Square.D(4)));
        board = moveApplier.applyMove(board, new Move('n', Square.C(6), Square.D(4)));
        board = moveApplier.applyMove(board, new Move('Q', Square.D(1), Square.D(4)));

        Assertions.assertEquals(
            """
            8 ........
            7 ........
            6 ........
            5 ........
            4 ....1...
            3 ........
            2 111..111
            1 ........
              abcdefgh""",
            board.getWhitePawns().toString()
        );
        Assertions.assertEquals(
            """
             8 ........
             7 1111.111
             6 ........
             5 ........
             4 ........
             3 ........
             2 ........
             1 ........
               abcdefgh""",
            board.getBlackPawns().toString()
        );
        Assertions.assertEquals(
            """
            8 ........
            7 ........
            6 ........
            5 ........
            4 ........
            3 ........
            2 ........
            1 .1......
              abcdefgh""",
            board.getWhiteKnights().toString()
        );
        Assertions.assertEquals(
            """
            8 ......1.
            7 ........
            6 ........
            5 ........
            4 ........
            3 ........
            2 ........
            1 ........
              abcdefgh""",
            board.getBlackKnights().toString()
        );
        Assertions.assertEquals(
            """
            8 ........
            7 ........
            6 ........
            5 ........
            4 ...1....
            3 ........
            2 ........
            1 ........
              abcdefgh""",
            board.getWhiteQueens().toString()
        );

        Assertions.assertEquals("KQkq", board.getCastlingInformation());
        Assertions.assertTrue(board.getEnPassantSquare().isEmpty());
    }

    @Test
    public void testEnPassantCapture() {
        var board = BoardRepresentation.fromFen("3rr1k1/p4pp1/2pB1n1p/5b2/PpP5/5B1P/1P3PP1/3R1RK1 b - a3 0 21");
        Assertions.assertEquals(
            """
            8 ........
            7 ........
            6 ........
            5 ........
            4 ........
            3 1.......
            2 ........
            1 ........
              abcdefgh""",
            board.getEnPassantSquare().toString()
        );

        var newBoard = moveApplier.applyMove(
            board,
            new Move('p', Square.B(4), Square.A(3), Move.Kind.EN_PASSANT_CAPTURE)
        );
        Assertions.assertEquals(
            """
            8 ........
            7 1....11.
            6 ..1....1
            5 ........
            4 ........
            3 1.......
            2 ........
            1 ........
              abcdefgh""",
            newBoard.getBlackPawns().toString()
        );
        Assertions.assertEquals(
            """
            8 ........
            7 ........
            6 ........
            5 ........
            4 ..1.....
            3 .......1
            2 .1...11.
            1 ........
              abcdefgh""",
            newBoard.getWhitePawns().toString()
        );
        Assertions.assertTrue(newBoard.getEnPassantSquare().isEmpty());
    }

    @Test
    public void testCastingFlagsKingMoved() {
        var board = BoardRepresentation.initial();
        var newBoard = moveApplier.applyMove(board, new Move('P', Square.E(2), Square.E(4)));
        newBoard = moveApplier.applyMove(newBoard, new Move('p', Square.E(7), Square.E(5)));
        newBoard = moveApplier.applyMove(newBoard, new Move('K', Square.E(1), Square.E(2)));
        Assertions.assertEquals("kq", newBoard.getCastlingInformation());
    }

    @Test
    public void testCastingFlagsRookMoved() {
        var board = BoardRepresentation.fromFen("rnbqkb1r/ppp2ppp/3p1n2/4p3/4P3/3B1N2/PPPP1PPP/RNBQK2R w KQkq - 2 4");
        var newBoard = moveApplier.applyMove(board, new Move('R', Square.H(1), Square.G(1)));
        Assertions.assertEquals("Qkq", newBoard.getCastlingInformation());
    }

    @Test
    public void testCastingMove() {
        var board = BoardRepresentation.fromFen("rnbqkb1r/ppp2ppp/3p1n2/4p3/4P3/3B1N2/PPPP1PPP/RNBQK2R w KQkq - 2 4");
        var newBoard = moveApplier.applyMove(
            board,
            new Move('K', Square.E(1), Square.G(1), Move.Kind.KING_SIDE_CASTLE)
        );

        Assertions.assertEquals(
            """
            8 ........
            7 ........
            6 ........
            5 ........
            4 ........
            3 ........
            2 ........
            1 ......1.
              abcdefgh""",
            newBoard.getWhiteKing().toString()
        );
        Assertions.assertEquals(
            """
            8 ........
            7 ........
            6 ........
            5 ........
            4 ........
            3 ........
            2 ........
            1 1....1..
              abcdefgh""",
            newBoard.getWhiteRooks().toString()
        );
        Assertions.assertEquals("kq", newBoard.getCastlingInformation());
    }
}
