package io.github.tedpaulsen.chess.lib;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class BoardRepresentationTest {

    private BoardRepresentation board;

    @BeforeEach
    public void setup() {
        board = new BoardRepresentation();
    }

    @Test
    public void testInitialWhiteKingLocation() {
        var bitboard = board.getWhiteKing();
        Assertions.assertEquals(
            """
                8 ........
                7 ........
                6 ........
                5 ........
                4 ........
                3 ........
                2 ........
                1 ....1...
                  abcdefgh""",
            bitboard.toString()
        );
        Assertions.assertEquals(16, bitboard.getValue());
    }

    @Test
    public void testInitialWhiteQueensLocation() {
        var bitboard = board.getWhiteQueens();
        Assertions.assertEquals(
            """
            8 ........
            7 ........
            6 ........
            5 ........
            4 ........
            3 ........
            2 ........
            1 ...1....
              abcdefgh""",
            bitboard.toString()
        );
        Assertions.assertEquals(8, bitboard.getValue());
    }

    @Test
    public void testInitialWhiteRooksLocation() {
        var bitboard = board.getWhiteRooks();
        Assertions.assertEquals(
            """
            8 ........
            7 ........
            6 ........
            5 ........
            4 ........
            3 ........
            2 ........
            1 1......1
              abcdefgh""",
            bitboard.toString()
        );
        Assertions.assertEquals(129, bitboard.getValue());
    }

    @Test
    public void testInitialWhiteBishopsLocation() {
        var bitboard = board.getWhiteBishops();
        Assertions.assertEquals(
            """
            8 ........
            7 ........
            6 ........
            5 ........
            4 ........
            3 ........
            2 ........
            1 ..1..1..
              abcdefgh""",
            bitboard.toString()
        );
        Assertions.assertEquals(36, bitboard.getValue());
    }

    @Test
    public void testInitialWhiteKnightsLocation() {
        var bitboard = board.getWhiteKnights();
        Assertions.assertEquals(
            """
            8 ........
            7 ........
            6 ........
            5 ........
            4 ........
            3 ........
            2 ........
            1 .1....1.
              abcdefgh""",
            bitboard.toString()
        );
        Assertions.assertEquals(66, bitboard.getValue());
    }

    @Test
    public void testInitialWhitePawnsLocation() {
        var bitboard = board.getWhitePawns();
        Assertions.assertEquals(
            """
            8 ........
            7 ........
            6 ........
            5 ........
            4 ........
            3 ........
            2 11111111
            1 ........
              abcdefgh""",
            bitboard.toString()
        );
        Assertions.assertEquals(65280, bitboard.getValue());
    }

    @Test
    public void testInitialBlackKingLocation() {
        var bitboard = board.getBlackKing();
        Assertions.assertEquals(
            """
            8 ....1...
            7 ........
            6 ........
            5 ........
            4 ........
            3 ........
            2 ........
            1 ........
              abcdefgh""",
            bitboard.toString()
        );
        Assertions.assertEquals(1152921504606846976L, bitboard.getValue());
    }

    @Test
    public void testInitialBlackQueensLocation() {
        var bitboard = board.getBlackQueens();
        Assertions.assertEquals(
            """
            8 ...1....
            7 ........
            6 ........
            5 ........
            4 ........
            3 ........
            2 ........
            1 ........
              abcdefgh""",
            bitboard.toString()
        );
        Assertions.assertEquals(576460752303423488L, bitboard.getValue());
    }

    @Test
    public void testInitialBlackRooksLocation() {
        var bitboard = board.getBlackRooks();
        Assertions.assertEquals(
            """
            8 1......1
            7 ........
            6 ........
            5 ........
            4 ........
            3 ........
            2 ........
            1 ........
              abcdefgh""",
            bitboard.toString()
        );
        Assertions.assertEquals(-9151314442816847872L, bitboard.getValue());
    }

    @Test
    public void testInitialBlackBishopsLocation() {
        var bitboard = board.getBlackBishops();
        Assertions.assertEquals(
            """
            8 ..1..1..
            7 ........
            6 ........
            5 ........
            4 ........
            3 ........
            2 ........
            1 ........
              abcdefgh""",
            bitboard.toString()
        );
        Assertions.assertEquals(2594073385365405696L, bitboard.getValue());
    }

    @Test
    public void testInitialBlackKnightsLocation() {
        var bitboard = board.getBlackKnights();
        Assertions.assertEquals(
            """
            8 .1....1.
            7 ........
            6 ........
            5 ........
            4 ........
            3 ........
            2 ........
            1 ........
              abcdefgh""",
            bitboard.toString()
        );
        Assertions.assertEquals(4755801206503243776L, bitboard.getValue());
    }

    @Test
    public void testInitialBlackPawnsLocation() {
        var bitboard = board.getBlackPawns();
        Assertions.assertEquals(
            """
            8 ........
            7 11111111
            6 ........
            5 ........
            4 ........
            3 ........
            2 ........
            1 ........
              abcdefgh""",
            bitboard.toString()
        );
        Assertions.assertEquals(71776119061217280L, bitboard.getValue());
    }

    @Test
    public void testInitialWhitePiecesLocation() {
        var bitboard = board.getWhitePieces();
        Assertions.assertEquals(
            """
           8 ........
           7 ........
           6 ........
           5 ........
           4 ........
           3 ........
           2 11111111
           1 11111111
             abcdefgh""",
            bitboard.toString()
        );
    }

    @Test
    public void testInitialBlackPiecesLocation() {
        var bitboard = board.getBlackPieces();
        Assertions.assertEquals(
            """
           8 11111111
           7 11111111
           6 ........
           5 ........
           4 ........
           3 ........
           2 ........
           1 ........
             abcdefgh""",
            bitboard.toString()
        );
    }
}
